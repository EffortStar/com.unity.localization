{
  "name": "com.unity.localization",
  "displayName": "Localization",
  "version": "1.4.0-exp.1",
  "unity": "2019.4",
  "description": "Use the Localization package to easily configure localization settings for your application.\n\nAdd support for multiple languages and regional variants, including:\n\n• String localization: Set different strings to display based on locale. Use the Smart Strings feature to add logic to automatically replace specific strings, such as placeholders and plurals.\n• Asset localization: Use a different asset (such as a texture, model, or audio file) based on a locale.\n• Pseudo-localization: Test how your project will adapt to different localizations at an early stage, before adding your translations.\n• Import and export localization data to XLIFF, CSV and Google Sheets.\n\nAdd localization to your projects using the Localization package to help make your applications more accessible to a wider audience.",
  "keywords": [
    "localization",
    "locale",
    "language"
  ],
  "dependencies": {
    "com.unity.addressables": "1.19.19",
    "com.unity.nuget.newtonsoft-json": "2.0.0"
  },
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/com.unity.localization.git",
    "type": "git",
    "revision": "0bb3bd35b3e55d5db215dc555bab5039e09df7f9"
  },
  "upm": {
    "changelog": "- Fix `NullReferenceException` when creating a new table that takes name from renamed table ([LOC-550](https://issuetracker.unity3d.com/issues/nullreferenceexception-creating-a-table-that-takes-name-from-renamed-table)).\n- String Table entries will no longer try to use `String.Format` when using `GetLocalizedString` with non-null but empty arguments ([LOC-689](https://issuetracker.unity3d.com/issues/localization-formatexception-error-is-thrown-in-the-console-window-when-calling-getlocalizedstringasync-class)).\n- Improved `FormatException` error message when `String.Format` throws during `GetLocalizedString`.\n- Added `LocalizationEditorEvents.ExtensionAddedToCollection` & `LocalizationEditorEvents.ExtensionRemovedFromCollection`, which can be used to react to collection extension additions & removals. Added `CollectionExtension.Destroy()` which can be used to perform cleanup when a collection extension is removed."
  },
  "upmCi": {
    "footprint": "b0c6f53818e12cfea7ed65f6038f38ba55126e29"
  },
  "samples": [
    {
      "displayName": "Creating Locales",
      "description": "This sample shows how to Locales including custom ones through script.",
      "path": "Samples~/CreatingLocales"
    },
    {
      "displayName": "Loading Strings",
      "description": "This sample shows multiple ways to fetch localized strings from the Localization system.",
      "path": "Samples~/LoadingStrings"
    },
    {
      "displayName": "Language Selection Menu (IMGUI)",
      "description": "This sample shows how to implement a simple language selection menu using IMGUI. The sample also includes an example of overriding the LocalesProvider in order to provide a custom list of available Locales.",
      "path": "Samples~/LocaleMenuIMGUI"
    },
    {
      "displayName": "Language Selection Menu (UGUI)",
      "description": "This sample shows how to implement a simple language selection menu using a UGUI Dropdown.",
      "path": "Samples~/LocaleMenuUGUI"
    },
    {
      "displayName": "Smart Strings - Persistent Variables",
      "description": "These samples show how Persistent Variables can be used in Smart Strings and how custom variables can be created.",
      "path": "Samples~/PersistentVariables"
    },
    {
      "displayName": "Preloading Screen",
      "description": "Preloading is a way to ensure that chosen Localization data is immediately available and does not require additional loading. This sample shows how to implement a loading screen to wait for preloading to complete.",
      "path": "Samples~/PreloadingScreen"
    }
  ]
}
